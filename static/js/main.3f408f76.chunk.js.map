{"version":3,"sources":["components/Container/Container.js","components/Row/Row.js","components/Col/Col.js","components/Header/Header.js","components/Search/Search.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","Row","Col","size","split","map","join","Header","Search","type","placeholder","aria-label","class","aria-hidden","id","App","style","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yOAQeA,MANf,SAAmBC,GACjB,OACE,uCAAKC,UAAS,mBAAcD,EAAME,MAAQ,SAAW,KAAUF,KCEpDG,MAJf,SAAaH,GACX,OAAO,uCAAKC,UAAS,aAAQD,EAAME,MAAQ,SAAW,KAAUF,KCQnDI,MATf,SAAaJ,GACX,IAAMK,EAAOL,EAAMK,KAChBC,MAAM,KACNC,KAAI,SAACF,GAAD,MAAU,OAASA,KACvBG,KAAK,KAER,OAAO,uCAAKP,UAAWI,GAAUL,KCEpBS,MARf,WACE,OACE,4BAAQR,UAAU,UAChB,wBAAIA,UAAU,QAAd,wBCmBSS,MApBf,WACE,OACE,0BAAMT,UAAU,eACV,2BACEA,UAAU,eACVU,KAAK,SACLC,YAAY,kBACZC,aAAW,WAEb,4BAAQZ,UAAU,iBAAiBU,KAAK,UACtC,uBACEG,MAAM,qBACNC,cAAY,OACZC,GAAG,mB,KCWFC,MAjBf,WACE,OACI,kBAAC,EAAD,CAAWhB,UAAU,MAAMiB,MAAO,CAAEC,OAAQ,IAC1C,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAKd,KAAK,SACR,kBAAC,EAAD,QAGJ,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAKA,KAAK,SACR,kBAAC,EAAD,U,KCTQe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f408f76.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return (\n    <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n  );\n}\n\nexport default Container;\n","import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Row;\n","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size\n    .split(\" \")\n    .map((size) => \"col-\" + size)\n    .join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1 className=\"logo\">Employee Directory</h1>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\n\n\nfunction Search() {\n  return (\n    <form className=\"form-inline\">\n          <input\n            className=\"form-control\"\n            type=\"search\"\n            placeholder=\"Quick search...\"\n            aria-label=\"Search\"\n          />\n          <button className=\"btn search-btn\" type=\"submit\">\n            <i\n              class=\"fa fa-search fa-lg\"\n              aria-hidden=\"true\"\n              id=\"search-icon\"\n            ></i>\n          </button>\n    </form>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\n\nimport Container from \"./components/Container/Container\";\nimport Row from \"./components/Row/Row\";\nimport Col from \"./components/Col/Col\";\nimport Header from \"./components/Header/Header\";\nimport Search from \"./components/Search/Search\";\n\nimport \"./App.css\";\n\n\nfunction App() {\n  return (\n      <Container className=\"App\" style={{ margin: 0 }}>\n        <Row>\n          <Col size=\"md-12\">\n            <Header />\n          </Col>\n        </Row>\n        <Row>\n          <Col size=\"md-12\">\n            <Search />\n          </Col>\n        </Row>\n      </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}